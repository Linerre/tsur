#+title: Notes on Rust Programming Language, The
#+author: Errenil <errelinaaron@gmail.com>

* 3. Common Programming Concepts
** 3.3 Functions
*** Function's return value/type
Rust functions by default returns the result of the last expression.

If there isn't such an expression, the function returns ~()~ (a unit type)

#+BEGIN_SRC rust
// For a fn that has an explicit return type
fn my_fn(arg: u64) -j> u64 {
    if sth {
        4
    }
    // here you must return another u64 type to satisify the fn's expected return type
    5
}
#+END_SRC
*** Function's unreachable code
Any variable/code that appears after the return logic of a fn will become *unreachable*
#+BEGIN_SRC rust
fn my_fn(arg: u64) {
    let mut name = String::new();

    // this fn will return and end after the if-else block
    if sth {
        4
    } else {
        5
    }

    // code below is unreachable
    let name = String::from("hello");
    name
}
#+END_SRC
* 8. Common Collections
** 8.1 Storing Lists of Values with Vectors
*** Vector index
It must be of type ~usize~ which represnts the pointer-size unsigned integer.
#+BEGIN_QUOTE
This occurs because ~v[i]~ is really parsed as ~*(&v + i)~, or the value at (the memory address of the vector + the index). Because ~&v~ is a memory address, ~i~, the index, must also be a memory address type. Rust represents memory addresses of the type ~usize~.
#+END_QUOTE
from: [[https://stackoverflow.com/a/62399119]]

#+BEGIN_SRC rust
// to access an element in a vec by casting u8 type integers
let my_vec = vec!["rust", "vector", "usize"];
let idx: u8 = 0;
let first_ele = my_vec[idx as usize]; // or
let first_ele_again = my_vec[usize::from(idx)];
#+END_SRC

* 9. Error Handling
** 9.2 Recoverable Errors with Result
~?~ will cause the expression return either ~OK(val)~ or ~Err(e)~:
1. ~val~ in ~Ok~ will be passed and assigned to the right of expression;
2. ~Err(e)~ will terminate the fn and show the ~e~
from:[[https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator][A Shortcut for Propagating Errors: the ? Operator]]
* 10. Generic Types, Traits, and Lifetimes
** Traits
*** Syntax
#+BEGIN_SRC rust
// can drop pub to make the trait private
pub trait TraitName {// trait name is by convention in CamelCase
    fn method_name(para); // should have the return type also specified
    // other methods, each ending with `;`
}

// implementing trait for a type
impl TraitName for type_name {
    fn method_name(para) { // should have the return type also specified
        // method body
    }
}

// Traits as parameters
pub fn notify(item: &impl TraitName) {
    println!("Item can call any method under TraitName {}", item.trait_method());
}

// The above is syntax sugar for the below
pub fn notify<T: TraitName>(item: &T) {
    println!("Item can call any method under TraitName {}", item.trait_method());
}
#+END_SRC
*** Usage
Can be used to
1. *define behavior* in a generic way
2. combine with generic types to *constrain a generic type* to accept only those types that have a particular behavior, as opposed to just any type
*** Extracts
#+BEGIN_QUOTE
1. A /trait/ defines functionality a particular type has and can share with other types.
2. A type’s *behavior consists of the methods we can call on that type*. Different types share the same behavior if we can call the same methods on all of those types.
3. Each type implementing this trait *must provide its own custom behavior* for the body of the method.
4. One restriction to note is that we can implement a trait on a type *only if* at least one of the trait or the type is *local to our crate*.
   If both trait and type come from, say, ~std~ library, then trait can't be implemented for type
#+END_QUOTE
** Generic Types (Generics)
*** Usage
1. [[https://doc.rust-lang.org/book/ch10-01-syntax.html#in-struct-definitions][In struct definitions]]
2. [[https://doc.rust-lang.org/book/ch10-01-syntax.html#in-enum-definitions][In enum definitions]]
3. [[https://doc.rust-lang.org/book/ch10-01-syntax.html#in-method-definitions][In method definitions]]

   A generic type ~Point<T>~ with a method that specifies a concrete type ~impl Point<f32>~
   will result in only that concrete type, ~f32~, can call this method.

There can be *two* generics in a ~struct~
#+BEGIN_SRC rust
struct Point<T, U> {
    x: T,
    y: U,
}
// T and U can be same or different types

enum Result<T, E> {
    Ok(T),
    Err(E),
}
// T and E here are just labels for marking different types.
// One can also use A and B, but it's not the convention.
#+END_SRC
#+BEGIN_QUOTE
This definition makes it convenient to use the ~Result~ enum anywhere we have an operation that might succeed (return a value of some type ~T~) or fail (return an error of some type ~E~).
#+END_QUOTE
** Type Parameter
*** Syntax
~T~ is prefered as a convention
#+BEGIN_QUOTE
You can use any identifier as a type parameter name. But we’ll use ~T~ because, by convention, type parameter names in Rust are short, often just a letter, and Rust’s type-naming convention is CamelCase. Short for “type,” ~T~ is the default choice of most Rust programmers.
#+END_QUOTE

#+BEGIN_SRC rust
// generic types
fn my_fn<T>(list: &[T])
//      ^^^ declare T first, then use it in the parameter list
#+END_SRC
*** Type Annotation
~T~ can also be associated with a type annotation
#+BEGIN_SRC rust
fn my_fn<T: std::cmp::PartialOld>(list: &[T])
//          ^^^^^^^^^^^^^^^^^^^^ type annotation
#+END_SRC
** Lifetimes
It's also a kind of generic.
#+BEGIN_QUOTE
1. Every reference in Rust has a lifetime, which is the scope for which that reference is valid
2. We *only must annotate types when multiple types are possible*. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways.
#+END_QUOTE
*** Syntax
#+BEGIN_SRC rust
&i32        // a reference
&'a i32     // a reference with an explicit lifetime
&'a mut i32 // a mutable reference with an explicit lifetime
#+END_SRC
*** Elision
#+BEGIN_QUOTE
The patterns programmed into Rust’s analysis of references are called the /lifetime elision rules/. These aren’t rules for programmers to follow; they’re a set of particular cases that the compiler will consider, and if your code fits these cases, you don’t need to write the lifetimes explicitly.
#+END_QUOTE

When there is an ambiguity, instead of guessing, the compiler will throw an error.
Programmers need to resolve the error by adding necessary lifetime annotations.

#+BEGIN_QUOTE
Lifetimes on function or method parameters are called /input lifetimes/, and lifetimes on return values are called /output lifetimes/.
#+END_QUOTE

* 13. Iterators
** Syntax
#+BEGIN_SRC rust
let v1 = vec![1, 2, 3];
let v1_iter = v1.iter(); // create an iterator from a Vec<T>
#+END_SRC

#+BEGIN_QUOTE
In Rust, iterators are /lazy/, meaning they have no effect until you call methods that consume the iterator to use it up.
#+END_QUOTE
** Usage
1. calling the ~next~ method on an iterator *changes* internal state of it:
   #+BEGIN_QUOTE
   calling the ~next~ method on an iterator changes internal state that the iterator uses to keep track of where it is in the sequence. In other words, this code /consumes/, or uses up, the iterator. Each call to ~next~ eats up an item from the iterator.


   We didn’t need to make v1_iter mutable when we used a ~for~ loop *because the loop took ownership of* ~v1_iter~ and *made it mutable* behind the scenes.
   #+END_QUOTE

2. values from the calls to ~next~ are *immutable references* to the values in the vector.
   - use ~into_iter~ to create an iterator that takes ownership of v1 and returns owned values
   - use ~iter_mut~ to iterate over mutable references
** Methods
~Iterator~ trait has some methods implemented in the standard library.
#+BEGIN_QUOTE
Find out about these methods by looking in the standard library API documentation for the ~Iterator~ trait.
#+END_QUOTE

*** Consuming adaptors
Methods that call ~next~ and therefore *use up* the iterator.
#+BEGIN_SRC rust
#[cfg(test)]
mod tests {
    #[test]
    fn iterator_sum() {
        let v1 = vec![1, 2, 3];

        let v1_iter = v1.iter();

        let total: i32 = v1_iter.sum();
        //                       ^^^^^ sum() takes ownership of the iterator
        // so after this line, v1_iter canNOT be called again.
        assert_eq!(total, 6);
    }
}
#+END_SRC

*** Produce other iterators
Such methods are called *iterator adaptors*.
#+BEGIN_QUOTE
they produce different iterators by changing some aspect of the original iterator.
#+END_QUOTE

Remember to use ~collect~ method to *consume* the new iterator.
** ~iter()~ vs ~into_iter()~
- ~iter()~ iterates over ~&T~, that's why ~collect()~ returns a ~Vec<&_>~
- ~into_iter()~ iterates over ~T~

* 21. Appendix
** 21.3 C - Derivable Traits
*** ~Clone~
#+BEGIN_QUOTE
...~Clone~ is more general than ~Copy~, ....
#+END_QUOTE
from: [[https://doc.rust-lang.org/std/clone/trait.Clone.html][Trait std::clone::Clone]]

#+BEGIN_QUOTE
~a.clone_from(&b)~ is equivalent to ~a = b.clone()~ in functionality,  but can be overridden to reuse the resources of a to avoid unnecessary allocations.
#+END_QUOTE
from:[[https://doc.rust-lang.org/std/clone/trait.Clone.html#provided-methods][Provided Methods]]

A type, say, a struct, can be cloned only if all its fields have implemented or derived trait ~Clone~.
*** ~Copy~
#+BEGIN_QUOTE
all programmers can assume that copying a value will be very fast.
#+END_QUOTE
from:[[https://doc.rust-lang.org/book/appendix-03-derivable-traits.html#clone-and-copy-for-duplicating-values][Clone and Copy for Duplicating Values]]
*** ~PartialEq~ and ~Eq~
Usually a struct or enum cannot be compared using ~=~ directly, unless it
~#[derive(PartialEq)]~:
#+BEGIN_QUOTE
The ~PartialEq~ trait allows you to compare instances of a type to check for equality and enables use of the ~==~ and ~!=~ operators.
#+END_QUOTE
from:[[https://doc.rust-lang.org/book/appendix-03-derivable-traits.html][PartialEq and Eq for Equality Comparisons]]

#+BEGIN_QUOTE
This trait can be used with ~#[derive]~. When derived on structs, two instances are equal only if *all* fields are equal, and not equal if any fields are not equal. When derived on enums, two instances are equal if they are the *same variant* and all fields are equal.
#+END_QUOTE
from:[[https://doc.rust-lang.org/std/cmp/trait.PartialEq.html#derivable][PartialEq: Derivable]]
