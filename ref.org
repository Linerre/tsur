#+title: Notes on Rust References
#+author: Errenil <errelinaaron@gmail.com>

* 8. Statements and expressions
** 8.1. Statements
** 8.2. Expressions
*** 8.2.12. Closure expressions
Clousres prefer to capture their environments using references (borrow) first.
#+BEGIN_QUOTE
Without the ~move~ keyword, the closure expression infers how it captures each variable from its environment, *preferring* to capture by /shared reference/, effectively borrowing all outer variables mentioned inside the closure's body.
#+END_QUOTE

See code snippet: [file:snippets/src/closures.rs]

* 10. Types system
** 10.1. Types
*** 10.1.11. Closure types
As to closures, the capturing has an order preference and the 1st is *immutable borrow*:
#+BEGIN_QUOTE
The compiler prefers to capture a closed-over variable by immutable borrow, followed by unique immutable borrow (see below), by mutable borrow, and finally by move.

It will pick the first choice of these that is compatible with how the captured variable is used inside the closure body.
#+END_QUOTE
from:[[https://doc.rust-lang.org/reference/types/closure.html#capture-modes][Capture modes]]

The ~&~ in closures removes a layer of indirection, as disucssed in this thread:
[[https://stackoverflow.com/questions/72103039/whats-the-purpose-of-mapx-x-in-rust][Stack Overflow: What is the purpose of ".map(|&x| x)" in Rust]]
